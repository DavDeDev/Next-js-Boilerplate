name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    name: Build with ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock','**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock','**/pnpm-lock.yaml') }}-
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build

  test:
    needs: build
    strategy:
      matrix:
        node-version: [20.x]

    name: Run all tests
    # runs-on: windows-latest
    runs-on: self-hosted
    # defaults:
    #   run:
    #     shell: bash
    

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Retrieve Git history, needed to verify commits
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock','**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock','**/pnpm-lock.yaml') }}-
      - run: pnpm install --frozen-lockfile

      # - name: Set SENTRY_AUTH_TOKEN env if secret exists
      #   shell: bash
      #   run: |
      #     if [[ -n "${{ secrets.SENTRY_AUTH_TOKEN }}" ]]; then
      #       echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> $GITHUB_ENV
      #     fi

      - name: Build Next.js for E2E tests
        run: pnpm run build

      - if: github.event_name == 'pull_request'
        name: Validate all commits from PR
        run: pnpm dlx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Linter
        run: pnpm run lint

      - name: Type checking
        run: pnpm run check-types

      - name: Run unit tests
        run: pnpm run test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Install Playwright (used for Storybook and E2E tests)
        run: pnpm dlx playwright install --with-deps

      - name: Run storybook tests
        run: pnpm run test-storybook:ci

      - name: Run E2E tests
        run: npx percy exec -- pnpm run test:e2e
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 7